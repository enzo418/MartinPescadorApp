@using FisherTournament.WebServer.Common;
@using FisherTournament.WebServer.Services.LeaderboardNotification;
@using Microsoft.Fast.Components.FluentUI.DesignTokens

@namespace FisherTournament.WebServer.Shared

@inherits LayoutComponentBase
@implements IDisposable

@inject BaseLayerLuminance BaseLayerLuminance
@inject GlobalState GlobalState
@inject LeaderboardNotificationService _leaderboardNotificationService
@inject IToastService _toast
@inject IJSRuntime _js

<PageTitle>Sistema Martin Pescador</PageTitle>


<div class="page overflow-y-scroll" @ref="container">
    <div class="top-bar">
        <NavMenu OnToggleTheme="@SwitchTheme" IsInDarkMode="@IsInDarkMode" />
    </div>

    <main style="height: calc(100% - 90px);">
        <article class="content h-full ml-[13px] mr-[13px] mb-0">
            <ErrorBoundary>
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <div class="flex flex-col h-full items-center justify-center">
                        <p class=" color-fg">There was an unexpected error. Sorry!</p>
                        <FluentButton OnClick="@(() => _js.GoBack())">Go back</FluentButton>
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        </article>
        <FluentToastContainer MaxToastCount="10" Timeout=@ToastTimeout RemoveToastsOnNavigation="false" />
        <FluentDialogProvider />
        <FluentTooltipProvider />
    </main>
</div>

@code {
    [Inject]
    private BodyFont BodyFont { get; set; } = default!;

    ElementReference container;

    private const int ToastTimeout = 5;

    StandardLuminance _baseLayerLuminance = StandardLuminance.LightMode;

    private bool IsInDarkMode = false;

    private ThrottleCall _showLeaderBoardUpdateDelted = new(ToastTimeout);

    private IJSObjectReference? _jsModule;

    protected override void OnInitialized()
    {
        _showLeaderBoardUpdateDelted.CallBack += async () =>
        {
            _toast.ShowInfo("Se actualizó la tabla de posiciones");
            await InvokeAsync(StateHasChanged);
        };

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await BodyFont.SetValueFor(container, "\"Montserrat\", \"Segoe UI Variable\", \"Segoe UI\", sans-serif");

            _jsModule = await _js.InvokeAsync<IJSObjectReference>("import", "./Shared/MainLayout.razor.js");

            bool prefeersDarkMode = await _jsModule!.InvokeAsync<bool>("prefeersDarkMode");

            IsInDarkMode = _baseLayerLuminance == StandardLuminance.DarkMode;

            if (!IsInDarkMode && prefeersDarkMode) {
                SwitchTheme();
                StateHasChanged();
            }
            
            _leaderboardNotificationService.OnLeaderboardWasUpdated += OnLeaderboardUpdated;
        }
    }

    public async void SwitchTheme()
    {
        IsInDarkMode = !IsInDarkMode;

        if (_baseLayerLuminance == StandardLuminance.LightMode)
            _baseLayerLuminance = StandardLuminance.DarkMode;
        else
            _baseLayerLuminance = StandardLuminance.LightMode;

        await BaseLayerLuminance.SetValueFor(container, _baseLayerLuminance.GetLuminanceValue());

        GlobalState.SetLuminance(_baseLayerLuminance);
    }

    Task OnLeaderboardUpdated(LeaderboardUpdatedEventArgs e)
    {
        _showLeaderBoardUpdateDelted.Call();

        /*_toast.CloseToast("leaderboard-update");

        _toast.ShowConfirmationToast(new ToastParameters<ConfirmationToastContent>()
            {
                Id = "leaderboard-update",
                Intent = ToastIntent.Info,
                Title = "Se actualizó la tabla de posiciones",
                Timeout = 5,
                TopCTAType = ToastTopCTAType.Dismiss,
                TopAction = null,
                OnTopAction = null,
                Icon = (new Icons.Regular.Size20.Info(), Color.Accent)
            });*/
        
         return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _leaderboardNotificationService.OnLeaderboardWasUpdated -= OnLeaderboardUpdated;
    }
}