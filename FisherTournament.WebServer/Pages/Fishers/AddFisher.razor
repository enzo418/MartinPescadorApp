@using System.Text.RegularExpressions
@using FisherTournament.Contracts.Fishers
@using Application.Fishers.Commands.CreateFisher
@using System.Globalization

@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime JSRuntime
@inject IMapper _mapper
@inject IToastService _toastService

@page "/fishers/add"

<div class="px-4" style="height: 80%">
    <div class="flex w-full flex-row items-center justify-between">
        <h1 class="page-title">Agregar Pescador</h1>
    </div>

    <EditForm EditContext="@editContext" OnSubmit="@Submit" class="relative h-full">
        <div class="flex justify-center gap-20 pt-7">
            <div class="flex flex-col justify-normal gap-10">
                <div>
                    <span class="color-fg text-sm">Información Personal</span>
                    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation" />
                </div>

                <p>
                    <FluentTextField AutoComplete="off" Autofocus="true" @bind-Value="@Model.FirstName" @ref=_txtNameRef Required="true">
                        Nombre <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.FirstName" />
                </p>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value="@Model.LastName" Required="true">Apellido <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.LastName" />
                </p>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value="@(Model.DNI)" Required="true">
                        DNI <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.DNI" />
                </p>
            </div>

            <div class="flex flex-col justify-normal gap-10">
                <div>
                    <span class="color-fg text-sm">Opcional</span>
                    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation" />
                </div>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value=date Required="false" Placeholder="01/12/1997"
                        Pattern="^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/\d{4}$">
                        Fecha nacimiento
                    </FluentTextField>
                <p class="error @dateValidationClasses">@dateValidationError</p>
                </p>
            </div>
        </div>

        <div class="columns-2 absolute bottom-0 m-auto flex w-full place-content-center gap-28">
            <FluentButton Appearance="Appearance.Stealth" @onclick=OnCancel>@(editContext.IsModified() ? "Cancelar" : "Volver")</FluentButton>
            <FluentButton Type=ButtonType.Submit Appearance="Appearance.Accent">Guardar</FluentButton>
        </div>
    </EditForm>
</div>


@code {
    string? date = "";
    private EditContext editContext = default!;
    private ValidationMessageStore? messageStore;
    private CreateFisherRequest Model { get; set; } = null!;

    private FluentTextField? _txtNameRef;

    string dateValidationError = "";

    string dateValidationClasses = "hidden";

    private DateTime _selectedDate = default;

    private bool _sending = false;

    protected override void OnInitialized()
    {
        Model ??= new("", "", "");
        editContext = new(Model);
        messageStore = new(editContext);
    }

    private void ValidateDateFormat(ChangeEventArgs e)
    {
        if (!DateTime.TryParseExact(e.Value?.ToString(), CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern, null, System.Globalization.DateTimeStyles.None, out _))
        {
            dateValidationError = "Formato de fecha inválido";
            dateValidationClasses = "";
        }
        else
        {
            dateValidationError = "";
            dateValidationClasses = "hidden";
        }
    }

    private async void OnCancel()
    {
        await JSRuntime.GoBack();
    }

    private async Task Submit()
    {
        System.Globalization.CultureInfo resourceCulture;

        if (_sending) return;
        if (!editContext.Validate() || !editContext.IsModified()) return;

        _sending = true;

        var mapped = _mapper.Map<CreateFisherCommand>(Model);
        var response = await _sender.Send(mapped);

        if (response.IsError)
        {
            editContext.AddValidationErrors(response.Errors, messageStore, Model)
                    .AddValidationErrors(response.Errors, messageStore, Model, _toastService);
        }
        else
        {
            _toastService.ShowSuccess($"Agregado pescador {Model.FirstName} {Model.LastName}");

            await JSRuntime.GoBack();
        }

        _sending = false;
    }
}