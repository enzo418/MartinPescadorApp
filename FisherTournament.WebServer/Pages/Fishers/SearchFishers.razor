@using System.Text.RegularExpressions
@using FisherTournament.Contracts.Fishers
@using Application.Fishers.Queries
@using FisherTournament.WebServer.Common.Errors;

@inject NavigationManager _nav
@inject ISender _sender
@inject IMapper _mapper
@inject IToastService _toastService

@page "/fishers"

<div  class="h-full px-4">
    <div class="flex w-full flex-row items-center justify-between">
        <h1 class="page-title">Buscar Pescador</h1>
    
        <FluentButton OnClick="@(() => _nav.NavigateTo("/fishers/add"))" IconStart="@(new Icons.Regular.Size16.AddCircle())" Appearance="Appearance.Accent">
		    Agregar Pescador
        </FluentButton>
    </div>


    <div class="mb-6 flex items-end justify-center gap-20 pt-7">
                <FluentTextField Autofocus="true" tabindex="6" @bind-Value=Name Placeholder="Nombre o Apellido" @oninput="SearchByNameAsync">
                Buscar por nombre
                </FluentTextField>

                <FluentTextField tabindex="7" Placeholder="DNI sin guiones" @oninput="SearchByDNIAsync">
                Buscar por DNI
                </FluentTextField>

                @* <FluentButton OnClick="Search" IconStart="@(new Icons.Regular.Size16.Search())" Appearance="Appearance.Accent">
                    Buscar
                </FluentButton> *@
     </div>

    <FluentDataGrid 
            @ref="fluentDataGrid" 
            ItemsProvider="itemsProviderCall" 
            TGridItem="FisherItem" 
            Pagination="@pagination"
            GridTemplateColumns="0.4fr 0.5fr 0.5fr 0.2fr">
        <ChildContent>
            <PropertyColumn Property="@(p => p.DNI)" Sortable="false" Title="DNI" />
            <PropertyColumn Property="@(p => p.FirstName)" Sortable="false" Title="Nombre" />
            <PropertyColumn Property="@(p => p.LastName)" Sortable="false" Title="Apellido" />
            <TemplateColumn Title="Acciones" Align="@Align.End">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => Edit(context))" />
            </TemplateColumn>
        </ChildContent>

        <EmptyContent>
            <div Style="min-height: 300px;" class="empty-content">
                <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
                &nbsp; No se encontraron pescadores.
            </div>
        </EmptyContent>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />
</div>

@code {
    string _searchedName = "";
    string _searchedDNI = "";
    string? Name = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    GridItemsProvider<FisherItem> itemsProviderCall = default!;

    FluentDataGrid<FisherItem> fluentDataGrid = default!;

    protected override void OnInitialized()
    {
        itemsProviderCall = async req =>
        {
            var fishers = await _sender.Send(new GetFishersQuery(
                _searchedName,
                _searchedDNI,
                pagination.CurrentPageIndex+1, 
                pagination.ItemsPerPage));

            if (!fishers.IsError)
            {
                return GridItemsProviderResult.From(
                    items: fishers.Value.Items,
                    totalItemCount: fishers.Value.TotalCount
                );
            } else
            {
                _toastService.ShowErrors(fishers.Errors);

                return GridItemsProviderResult.From(
                    items: new List<FisherItem>(),
                    totalItemCount: 0
                );
            }
        };
    }

/*    async Task Search()
    {
        await fluentDataGrid.RefreshDataAsync();
    }
*/

    async Task SearchByNameAsync(ChangeEventArgs e)
    {
        _searchedName = e.Value?.ToString() ?? "";
		await fluentDataGrid.RefreshDataAsync();        
    }

    async Task SearchByDNIAsync(ChangeEventArgs e)
    {
        _searchedDNI = e.Value?.ToString() ?? "";
        await fluentDataGrid.RefreshDataAsync();
    }

    void Edit(FisherItem context)
    {
        _nav.NavigateTo($"/fisher/{context.Id}");
    }
}