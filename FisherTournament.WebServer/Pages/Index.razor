@page "/"
@using FisherTournament.Application.Competitions.Queries.GetTournamentCompetitions
@using FisherTournament.Application.Tournaments.Queries.GetTournamentsSummary

@inject NavigationManager NavManager
@inject ISender _sender
@inject IToastService _toast

<FluentStack Orientation="Orientation.Vertical"
			 VerticalAlignment="VerticalAlignment.Center"
			 HorizontalAlignment="HorizontalAlignment.Center"
			 VerticalGap="70" Class="h-full w-full">
	<?xml version="1.0" encoding="UTF-8" ?>
	<svg width="auto" height="150" version="1.2" viewBox="0 0 60 55" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"><style /><g transform="matrix(.58868 0 0 .57343 -4.7733 -2.9015)"><path path fill="var(--neutral-foreground-rest)" d="m16.897 4.35s13.072 62.806 46.228 61.29c0 9.473-12.504 13.831-12.504 13.831s-14.02 2.841-17.052 4.926c0 0-0.378-8.147 3.979-15.914 0 0-4.536 5.828-8.246 4.668-4.783-1.497-16.688-11.387-18.946-27.486 0 0 0.884 0.294 1.767 0.294 0 0-4.566-4.365-3.239-21.891l1.374 1.178c1e-3 0-0.938-7.35 6.639-20.896" /><path d="m49.801 59.878s7.507-4.163 12.926-2.941c0 0-0.171 1.598 0.9 2.561 0.605 0.545 0.938 0.832 2.25 0.957 0-1e-3 -6.668 1.163-16.076-0.577" /><path d="m34.187 74.544s-2.083 7.768-1.515 12.314c0 0 3.41-1.326 9.093-2.273l-4.168 9.853s-5.154 1.663-10.648 1.095c-2e-3 -1e-3 3.259-15.116 7.238-20.989" /><path d="m43.611 45.937 5.305 4.926s6.631-5.59 11.178-5.684c0 0 4.927-15.915 19.515-30.692-0.632 0.157-18.401 4.378-20.854 15.373 0 0-0.785-1.865-0.174-3.248 0 0-10.231 5.897-9.643 12.672 0 0-0.785-0.295-0.969-1.778 0 0-3.409 3.884-4.358 8.431" /><path d="m68.176 62.181s-2.592 2.432-6.045 2.527c-3.811 0.105-8.953-1.139-12.409-3.967 0 0 7.766 2.032 12.094 1.101 4.004-0.864 6.36 0.339 6.36 0.339" /><path d="m31.998 40.701c5.157 9.299 8.542 12.628 16.541 18.308 0 0 18.067-10.046 20.651 2.842 0 0 14.776 7.389 22.166 8.904 0 0-10.608-8.62-16.295-12.409 0 0-10.229-21.125-26.712-3.694 0-1e-3 -7.809-4.871-16.351-13.951" /><path d="m63.424 57.124s-0.525 2.105 3.625 2.982c0 1e-3 -0.526-2.629-3.625-2.982" /></g><g transform="matrix(.51871 0 0 .5395 -.788 -.38261)" fill="#fff"><path d="m16.897 4.35s13.072 62.806 46.228 61.29c0 9.473-12.504 13.831-12.504 13.831s-14.02 2.841-17.052 4.926c0 0-0.378-8.147 3.979-15.914 0 0-4.536 5.828-8.246 4.668-4.783-1.497-16.688-11.387-18.946-27.486 0 0 0.884 0.294 1.767 0.294 0 0-4.566-4.365-3.239-21.891l1.374 1.178c1e-3 0-0.938-7.35 6.639-20.896" /><path d="m49.801 59.878s7.507-4.163 12.926-2.941c0 0-0.171 1.598 0.9 2.561 0.605 0.545 0.938 0.832 2.25 0.957 0-1e-3 -6.668 1.163-16.076-0.577" /><path d="m34.187 74.544s-2.083 7.768-1.515 12.314c0 0 3.41-1.326 9.093-2.273l-4.168 9.853s-5.154 1.663-10.648 1.095c-2e-3 -1e-3 3.259-15.116 7.238-20.989" /><path d="m43.611 45.937 5.305 4.926s6.631-5.59 11.178-5.684c0 0 4.927-15.915 19.515-30.692-0.632 0.157-18.401 4.378-20.854 15.373 0 0-0.785-1.865-0.174-3.248 0 0-10.231 5.897-9.643 12.672 0 0-0.785-0.295-0.969-1.778 0 0-3.409 3.884-4.358 8.431" /><path d="m68.176 62.181s-2.592 2.432-6.045 2.527c-3.811 0.105-8.953-1.139-12.409-3.967 0 0 7.766 2.032 12.094 1.101 4.004-0.864 6.36 0.339 6.36 0.339" /><path d="m31.998 40.701c5.157 9.299 8.542 12.628 16.541 18.308 0 0 18.067-10.046 20.651 2.842 0 0 14.776 7.389 22.166 8.904 0 0-10.608-8.62-16.295-12.409 0 0-10.229-21.125-26.712-3.694 0-1e-3 -7.809-4.871-16.351-13.951" /><path d="m63.424 57.124s-0.525 2.105 3.625 2.982c0 1e-3 -0.526-2.629-3.625-2.982" /></g></svg>

@if (ongoingTournamentFound) {
	<FluentLabel Typo="Typography.PageTitle">Torneo en curso "@ongoingTournament.tournament.Name"</FluentLabel>

	<FluentStack Orientation="Orientation.Vertical"
			 VerticalAlignment="VerticalAlignment.Center"
			 HorizontalAlignment="HorizontalAlignment.Start"
			 VerticalGap="20" Width="fit-content">

		<FluentButton 
				Appearance="Appearance.Lightweight"
						  IconStart="@(new Icons.Regular.Size24.ArrowRight())"
						  OnClick="@(async () => NavManager.NavigateTo($"/tournament/{ongoingTournament.tournament.Id}"))">
				Ir al torneo</FluentButton>

		<FluentButton 
			Appearance="Appearance.Lightweight"
						  IconStart="@(new Icons.Regular.Size24.People())"
							  OnClick="@(async () => NavManager.NavigateTo($"/tournament/{ongoingTournament.tournament.Id}/inscriptions"))">
				@ongoingTournament.tournament.InscriptionsCount Inscripcion@(ongoingTournament.tournament.InscriptionsCount > 1 ? "es" : "")
			</FluentButton>

		<FluentButton Appearance="Appearance.Lightweight"
						  IconStart="@(new Icons.Regular.Size24.CalendarDate())"
						  OnClick="@(async () => NavManager.NavigateTo($"/tournament/{ongoingTournament.tournament.Id}/competitions"))">
				@ongoingTournament.tournament.CompetitionsCount Competicion@(ongoingTournament.tournament.CompetitionsCount > 1 ? "es" : "")
		</FluentButton>

		<FluentButton Appearance="Appearance.Lightweight"
						  IconStart="@(new Icons.Regular.Size24.CalendarMultiple())"
						  OnClick="@(async () => NavManager.NavigateTo($"/tournament/{ongoingTournament.tournament.Id}/leaderboard"))">
				Tabla de posiciones
		</FluentButton>
	</FluentStack>
} else
{
	<FluentLabel Typo="Typography.H4">No hay torneos en curso</FluentLabel>
	<FluentAnchor Href="/tournaments" Appearance="Appearance.Hypertext">Puedes crear uno desde la página de los torneos</FluentAnchor>
}
</FluentStack>

@code {
	record struct TournamentSummary(GetTournamentsSummaryQueryResult tournament, IEnumerable<GetTournamentCompetitionsQueryResult> Competitions);

	TournamentSummary ongoingTournament;
	bool ongoingTournamentFound = false;

	protected override async Task OnInitializedAsync()
	{
		var query = new GetTournamentsSummaryQuery(
				Ended: false,
				TournamentYear: DateTime.Now.Year,
				1,
				1);

		var result = await _sender.Send(query);

		if (result.IsError)
		{
			_toast.ShowErrors(result.Errors);
		}

		if (result.Value.TotalCount > 0)
		{
			var tournamentSummariesTasks = result.Value.Items.Select(async t =>
			{
				var query = new GetTournamentCompetitionsQuery(t.Id);

				var result = await _sender.Send(query);

				if (result.IsError)
				{
					_toast.ShowErrors(result.Errors);
					return new TournamentSummary(t, new List<GetTournamentCompetitionsQueryResult>());
				}

				return new TournamentSummary(t, result.Value);
			});

			ongoingTournament = (await Task.WhenAll(tournamentSummariesTasks)).First();

			ongoingTournamentFound = true;
		}
	}
}