@layout MainLayout
@page "/tournaments/add"

@inject IJSRuntime _js
@inject NavigationManager _nav
@inject ISender _sender
@inject IMapper _mapper
@inject IToastService _toast

@using FisherTournament.Application.Tournaments.Commands.CloneTournament;
@using FisherTournament.Application.Tournaments.Commands.CreateTournament;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentsSummary;
@using FisherTournament.Contracts.Tournaments;
@using Microsoft.Fast.Components.FluentUI;

<div class="h-full px-4" style="width: 98%">
    <h1 class="page-title">Crear torneo</h1>

    <EditForm EditContext="@editContext" OnSubmit="@Submit" class="mt-4 flex w-full flex-col items-center justify-between">
        <FluentGrid Spacing="3" Justify="JustifyContent.Center">
            <FluentGridItem sm="12">
                <div class="flex w-full flex-col items-center justify-center pl-7">
                    <FluentSwitch   Disabled=@(!tournaments.Any()) @bind-Value=@cloneTournament Label=" Copiar torneo anterior" />

                    <FluentLabel Class="pb-2 pl-7 pr-3 pt-7" Typo="Typography.Body" Disabled=@(!cloneTournament)>Selecciona el torneo a copiar</FluentLabel>
                    <FluentSelect   Items="@tournaments"
                                    OptionValue="@(i => i.Id)"
                                    @bind-SelectedOption=@cloneSourceTournamentSelected
                                    Disabled=@(!cloneTournament)
                                  TOption="GetTournamentsSummaryQueryResult">
                    <OptionTemplate Context="ctxTournament">
                        @ctxTournament.Name
                    </OptionTemplate>
                    </FluentSelect>
                </div>
            </FluentGridItem>

            <FluentGridItem sm="12">
                <FluentLabel Typo="Typography.Subject" Color="Color.Disabled">Datos del torneo nuevo</FluentLabel>
            </FluentGridItem>

            <FluentGridItem sm="12" md="5">
                <p>
                    <FluentTextField Required="true" AutoComplete="off" Autofocus="true" @bind-Value="@Model.Name" class="w-full">
                        Nombre del torneo <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.Name" />
                </p>
            </FluentGridItem>
            <FluentGridItem sm="12" md="5">
                <p>
                    <FluentDatePicker class="w-full" Required="true" @bind-Value=StartDate AriaLabel="Fecha inicio" Label="Fecha inicio" />
                    <ValidationMessage For="() => Model!.StartDate" />
                </p>
            </FluentGridItem>
        </FluentGrid>

        <div class="columns-2 absolute bottom-0 m-auto mb-4 mt-7 flex w-full place-content-center gap-28">
            <FluentButton Appearance="Appearance.Stealth" @onclick=CancelAsync>@(editContext.IsModified() ? "Cancelar" : "Volver")</FluentButton>
            <FluentButton Type=ButtonType.Submit Appearance="Appearance.Accent">Continuar</FluentButton>
        </div>
    </EditForm>
</div>


@code {
    private bool Finished = false;

    private CreateTournamentRequest Model { get; set; } = default!;
    private EditContext editContext = default!;
    private ValidationMessageStore? messageStore;

    private DateTime? StartDate = DateTimeOffset.Now.LocalDateTime;

    private bool _sending = false;

    private bool cloneTournament = false;

    private List<GetTournamentsSummaryQueryResult> tournaments = new();
    private GetTournamentsSummaryQueryResult cloneSourceTournamentSelected = default!;

    protected override async Task OnInitializedAsync()
    {
        Model = new("", DateTimeOffset.Now.LocalDateTime, null);
        editContext = new(Model);
        messageStore = new(editContext);

        var query = new GetTournamentsSummaryQuery(
                Ended: null,
                TournamentYear: null,
                1,
                5);

        var result = await _sender.Send(query);

        if (!result.IsError)
        {
            tournaments = result.Value.Items;
        }
    }

    private async Task CancelAsync()
    {
        await _js.GoBack();
    }

    private async Task Submit()
    {
        if (_sending) return;

        _sending = true;

        if (StartDate is not null)
        {
            Model.StartDate = StartDate.Value.ToUniversalTime();
        } else
        {
            var fieldIdentifier = new FieldIdentifier(Model, nameof(Model.StartDate));
            messageStore?.Add(fieldIdentifier, "Fecha invalida");

            editContext?.NotifyValidationStateChanged();

            return;
        }

        if (!editContext.Validate() || !editContext.IsModified()) return;

        if (cloneTournament)
        {
            var command = new CloneTournamentCommand(cloneSourceTournamentSelected.Id, Model.Name, Model.StartDate);

            Model = new("", DateTimeOffset.Now.LocalDateTime, null);

            var response = await _sender.Send(command);

            if (response.IsError)
            {
                editContext.AddValidationErrors(response.Errors, messageStore, Model);
            } else
            {
                _nav.NavigateTo("/tournament/" + response.Value.TournamentId);

                bool createdWithWarnings = response.Value.Warnings is not null && response.Value.Warnings.Any();
                if (createdWithWarnings)
                {
                    _toast.ShowInfo("El torneo no pudo ser copiado en su totalidad.");
                    _toast.ShowErrors(response.Value.Warnings!);
                }
                else
                {
                    _toast.ShowInfo("El torneo fue copiado correctamente.");
                }
            }
        }
        else
        {
            var mapped = _mapper.Map<CreateTournamentCommand>(Model);

            Model = new("", DateTimeOffset.Now.LocalDateTime, null);

            var response = await _sender.Send(mapped);

            if (response.IsError)
            {
                editContext.AddValidationErrors(response.Errors, messageStore, Model);
            } else
            {
                _nav.NavigateTo("/tournament/"+response.Value.Id);
            }
        }


        _sending = false;
    }
}