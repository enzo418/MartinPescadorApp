@layout TournamentLayout
@page "/tournament/{TournamentId}/leaderboard/{CompetitionId}"
@using FisherTournament.Application.Competitions.Queries.GetCompetition;
@using FisherTournament.Application.Competitions.Queries.GetLeaderBoard;
@using FisherTournament.Application.Competitions.Queries.GetLeaderboardItemDetails;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.WebServer.Services.ExportLeaderboard;
@using FisherTournament.WebServer.Services.LeaderboardNotification;
@using FisherTournament.WebServer.Pages.Tournaments.Dialog;
@using System.Diagnostics;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject ExportLeaderboardService _exportService
@inject ILogger<CompetitionsLeaderboard> _logger

<h1 class="page-title-no-pt">Tabla de posiciones de la <span style="color: var(--accent-fill-rest);">fecha N° @competition.N</span></h1>

<div class="mb-7 mt-7 flex w-full flex-row items-end justify-between">
    <div class="flex flex-row gap-x-2">
        <div>
            <FluentSelect   Items=_categories
                            OptionText="@(i => i.Name)"
                            OptionValue="@(i => i.Id)"
                            @bind-Value="@_selectedCategoryId">
                <LabelTemplate>
                    Categoría
                </LabelTemplate>
            </FluentSelect>
        </div>

        <FluentDivider Orientation="Orientation.Vertical" />

        <ScrollerGoToCompetition Class="ml-3" TournamentId=@TournamentId />
    </div>
    
    <div>
        <FluentAnchor 
            IconStart="@(new Icons.Regular.Size16.Edit())"
            Href=@($"/tournament/{TournamentId}/competition/{CompetitionId}/edit-scores") 
            Appearance="Appearance.Outline">Editar puntajes</FluentAnchor>
        <FluentButton 
            IconStart="@(new Icons.Regular.Size16.Share())" 
            OnClick="ExportLeaderboard" 
            Appearance="Appearance.Outline">Exportar</FluentButton>
    </div>
</div>

<CompetitionLeaderboardList CategoryId="@_selectedCategoryId" OnCategoriesChanged=@OnCategoriesChanged CompetitionId=@CompetitionId />


@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    [Parameter]
    public string CompetitionId { get; set; } = null!;

    private bool _openExport = false;

    List<(string Id, string Name)> _categories = new();

    string _selectedCategoryId = "";

    GetCompetitionQueryResponse competition = default!;

    private bool shouldExit = false;

    protected async override Task OnInitializedAsync()
    {
        await GetCompetition();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldExit) _js.GoBack();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetCompetition();
    }

    public void  OnCategoriesChanged(List<(string Id, string Name)> cats)
    {
        _categories = cats;

        if (string.IsNullOrEmpty(_selectedCategoryId))
        {
            if (cats.Any(c => c.Name == "General"))
            {
                _selectedCategoryId = cats.First(c => c.Name == "General").Id;
            } else if (cats.Any()) _selectedCategoryId = cats.First().Id;
        } else if (!cats.Any(c => c.Id == _selectedCategoryId))
        {
            _selectedCategoryId = cats.First().Id;
        }

        StateHasChanged();
    }

    async Task GetCompetition()
    {
        var competitionQuery = new GetCompetitionQuery(CompetitionId);
        var competitionRes = await _sender.Send(competitionQuery);

        if (competitionRes.IsError)
        {
            _toastService.ShowErrors(competitionRes.Errors);
            shouldExit = true;
        } else
        {
            competition = competitionRes.Value;
        }
    }

    string? GetCurrentCategoryName()
    {
        if (_categories.Any(p => p.Id == _selectedCategoryId))
        {
            return _categories.First(p => p.Id == _selectedCategoryId).Name;
        }

        return null;
    }

    async Task ExportLeaderboard()
    {
        try
        {
            var exportReq = await _exportService.ExportCompetitionLeaderboard(CompetitionId);

            if (exportReq.IsError)
            {
                _toastService.ShowErrors(exportReq.Errors);
            } else
            {
                /*var directory = System.IO.Directory.GetCurrentDirectory();
                _toastService.ShowSuccess(
                    $"Tabla de posiciones exportada correctamente al archivo '{exportReq.Value}' en {directory}",
                    null,
                    "Abrir",
                    EventCallback.Factory.Create<ToastResult>(this, t => HandleTopActionAsync(t, exportReq.Value))
                );*/

                _toastService.ShowSuccess(
                    $"Tabla generada '{exportReq.Value}'",
                    null,
                    "Descargar",
                    EventCallback.Factory.Create<ToastResult>(this, async t =>
                    {
                        var fileURL = ExportLeaderboardService.PublicExportPath + "/" + exportReq.Value;
                        await _js.InvokeVoidAsync("triggerFileDownload", exportReq.Value, fileURL);
                    })
                );
            }
        } catch (System.IO.IOException e)
        {
            _logger.LogError(e, "Error exporting leaderboard");
            _toastService.ShowError("No se puede expotar, el archivo esta siendo usado por otro programa.");
        } catch (Exception e)
		{
			_logger.LogError(e, "Error exporting leaderboard");
			_toastService.ShowError("Error inesperado al exportar la tabla de posiciones.");
		}
    }

    private async Task HandleTopActionAsync(ToastResult result, string filePath)
    {
        ProcessStartInfo startInfo = new ProcessStartInfo
        {
            FileName = filePath,
            UseShellExecute = true
        };

        Process.Start(startInfo);

        await Task.CompletedTask;
    }
}
