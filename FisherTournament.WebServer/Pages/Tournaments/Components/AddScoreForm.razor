@using FisherTournament.Application.Competitions.Commands.AddScore;
@using FisherTournament.Application.Competitions.Queries.GetTournamentCompetitions;
@using FisherTournament.Application.Fishers.Queries;
@using FisherTournament.Application.Tournaments.Queries.GetInscription;
@using FisherTournament.Contracts.Competitions;
@using FisherTournament.WebServer.Common.Model;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject IMapper _mapper

@if (CompetitionId is null && _competitions.Count == 0)
{
	<div Style="min-height: 300px;" class="flex items-center justify-center pt-2">
		<FluentIcon Icon="Icons.Regular.Size32.Warning" Color="@Color.Accent" />
		&nbsp; No se puede registrar un puntaje ya que todavía no hay competiciones.
	</div>
} else
{
	<EditForm EditContext="_editContext" OnValidSubmit="Save">
		@if (CompetitionId is null)
		{
			<CenteredSectionSeparator Class="mb-7 mt-10">Competencia</CenteredSectionSeparator>

			<div class="flex flex-col items-center">
				<div>
					<FluentSelect Items=_competitions
								OptionText="@(i => $"N° {i.N}")"
								OptionValue="@(i => i.Id)"
								@bind-Value="@_selectedCompetitionId">
					<LabelTemplate>
						Competencia <span class="red">*</span>
					</LabelTemplate>
					</FluentSelect>
				</div>
			</div>
		}

		<CenteredSectionSeparator Class="mb-7 mt-16">Pescador</CenteredSectionSeparator>

		<div class="flex flex-col items-center">
			<div class="flex flex-row items-end gap-4">
				<div>
					<FluentTextField @bind-Value="_searchByNameValue"
						Placeholder="Nombre"
						AutoComplete="off"
						Label="Buscar por nombre"
						@oninput="@SearchFisherByName"
						Disabled="@(_selectedFisher is not null)">
						<FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral" />
					</FluentTextField>
				</div>
			
				<div>
					<FluentNumberField @bind-Value="_searchByNumberValue"
						Placeholder="Número"
						AutoComplete="off"
						Label="Buscar por Número de pescador"
						@bind-Value:after="@SearchFisherByFisherNumber"
						Disabled="@(_selectedFisher is not null)">
						<FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral" />
					</FluentNumberField>
				</div>
			</div>


			@if (_selectedFisher is not null)
			{
				<FluentCard class="mt-4" style="height:100px;width:500px">
					<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
						<div class="flex flex-col gap-2">
							<div>
								<span class="color-fg font-bold">Nombre</span>
								<span class="color-fg">@(_selectedFisher?.Name)</span>
							</div>

							<div>
								<span class="color-fg font-bold">DNI</span>
								<span class="color-fg">@_selectedFisher?.DNI</span>
							</div>
						</div>

						<div>
							<p style="color: var(--accent-fill-rest);">
								@* <FluentIcon Value="@(new Icons.Regular.Size24.Checkmark())" /> *@
								Seleccionado
							</p>

							<FluentButton IconStart="@(new Icons.Regular.Size16.ArrowUndo())"
											@onclick=Deselect
											Appearance="Appearance.Outline">
								Deseleccionar
							</FluentButton>

						</div>
					</div>
				</FluentCard>
				<ValidationMessage For="@(() => Request.FisherId)" />
			} else
			{
				@foreach (var persona in _searchByNameResult)
				{
					<FluentCard class="mt-4" style="height:100px;width:500px">
						<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
							<div class="flex flex-col gap-2">
								<div>
									<span class="color-fg font-bold">Nombre</span>
									<span class="color-fg">@persona.Name</span>
								</div>

								<div>
									<span class="color-fg font-bold">DNI</span>
									<span class="color-fg">@persona.DNI</span>
								</div>
							</div>

							<FluentButton IconStart="@(new Icons.Regular.Size16.Checkmark())"
							@onclick="@(() => Select(persona))"
											Appearance="Appearance.Accent">
								Seleccionar
							</FluentButton>
						</div>
					</FluentCard>
				}
			}
		</div>

		@if (_selectedFisher is not null)
		{
			<CenteredSectionSeparator Class="mb-7 mt-16">Puntaje</CenteredSectionSeparator>

			<div class="flex w-full flex-row justify-evenly">
				<FluentNumberField @bind-Value=Score Min="0" Required="true">
					Puntaje <span class="red">*</span>
				</FluentNumberField>
				<ValidationMessage For="@(() => Request.Score)" />
			</div>

			<div class="absolute mb-6 mt-10 flex w-full flex-row justify-center gap-24">
				<FluentButton Appearance="Appearance.Stealth" OnClick="Cancel">Cancelar</FluentButton>
				<FluentButton Disabled=!CanSave()
								IconStart="@(new Icons.Regular.Size16.Checkmark())"
								Appearance="Appearance.Accent"
								Type="ButtonType.Submit">Guardar</FluentButton>
			</div>
		
			<ValidationSummary />
		}
	</EditForm>
}

@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	[Parameter]
	public string? CompetitionId { get; set; } = null!;

	[Parameter]
	public Action? OnSavedSuccessfully { get; set; } = null!;

	Persona? _selectedFisher;
	List<Persona> _searchByNameResult = new();

	private int? Score
	{
		get => Request.Score == 0 ? null : Request.Score;
		set => Request.Score = value.HasValue ? value.Value : Request.Score;
	}

	AddScoreRequest Request = new();
	private EditContext _editContext = null!;
	private ValidationMessageStore _validationMessageStore = null!;

	List<GetTournamentCompetitionsQueryResult> _competitions = new();
	private string _selectedCompetitionId = null!;

	private string? _searchByNameValue = null;
	private int? _searchByNumberValue = null;

	private bool _shouldExit = false;

	private bool _sending = false;

	protected override async Task OnInitializedAsync()
	{
		if (CompetitionId is null)
		{
			var query = new GetTournamentCompetitionsQuery(TournamentId);
			var res = await _sender.Send(query);

			if (res.IsError)
			{
				_toastService.ShowErrors(res.Errors);
				_shouldExit = true;
				return;
			}

			_competitions = res.Value.OrderBy(c => c.N).ToList();

			if (_competitions.Count > 0)
			{
				// the one closest to today, but with startdate before now, is equal to the first of ascending difference.
				_selectedCompetitionId = _competitions
											.Where(c => c.EndDate == null)
											.OrderBy(c => (c.StartDate - DateTime.UtcNow).Days)
											.First().Id;

				if (string.IsNullOrEmpty(_selectedCompetitionId)) _selectedCompetitionId = _competitions.First().Id;
			}
		} else
		{
			_selectedCompetitionId = CompetitionId;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (_shouldExit) _js.GoBack();
	}

	protected override void OnInitialized()
	{
		_editContext = new EditContext(Request);
		_validationMessageStore = new ValidationMessageStore(_editContext);
		_editContext.OnValidationRequested += (s, e) => _validationMessageStore.Clear();
		_editContext.OnFieldChanged += (s, e) => _validationMessageStore.Clear(e.FieldIdentifier);
	}

	private void Select(Persona persona)
	{
		//var query = new GetInscriptionQueryByFisherId(TournamentId, persona.Id);
		SetSelectedPerson(persona);
	}

	private void SetSelectedPerson(Persona persona)
	{
		_selectedFisher = persona;
		_searchByNameResult.Clear();

		Request.FisherId = persona.Id;
	}

	private void Deselect()
	{
		_selectedFisher = null;
		Request.FisherId = "";
	}

	void Cancel()
	{
		_selectedFisher = null;
	}

	private async Task SearchFisherByName(ChangeEventArgs e)
	{
		_searchByNameValue = e.Value?.ToString() ?? string.Empty;

		var query = new GetFishersQuery(_searchByNameValue, "", 1, 2);

		var result = await _sender.Send(query);

		if (result.IsError)
		{
			_toastService.ShowErrors(result.Errors);
			return;
		}

		_searchByNameResult = result.Value.Items.Select(i => new Persona(i.Id, $"{i.LastName} {i.FirstName}", i.DNI)).ToList();
	}

	private async Task SearchFisherByFisherNumber()
	{
		if (!_searchByNumberValue.HasValue) return;

		var query = new GetInscriptionQueryByInscriptionNumber(TournamentId, _searchByNumberValue.Value);
		var res = await _sender.Send(query);

		if (res.IsError)
		{
			_toastService.ShowErrors(res.Errors);
			return;
		}

		var getFisherQuery = new GetFisherQuery(res.Value.FisherId);
		var getFisherRes = await _sender.Send(getFisherQuery);

		if (getFisherRes.IsError)
		{
			_toastService.ShowErrors(getFisherRes.Errors);
			return;
		}

		SetSelectedPerson(new Persona(getFisherRes.Value.Id, $"{getFisherRes.Value.LastName} {getFisherRes.Value.FirstName}", getFisherRes.Value.DNI));
	}

	bool CanSave()
	{
		return !_sending
				&& _selectedFisher is not null
				&& Request.Score > 0
				&& !string.IsNullOrEmpty(_selectedCompetitionId);
	}

	async Task Save()
	{
		if (!CanSave()) return;

		_sending = true;

		var command = _mapper.Map<AddScoreCommand>((Request, _selectedCompetitionId));
		var res = await _sender.Send(command);

		if (res.IsError)
		{
			_editContext.AddValidationErrors(res.Errors, _validationMessageStore, Request, _toastService);
		} else
		{
			_toastService.ShowSuccess("Puntaje agregado");

			OnSavedSuccessfully?.Invoke();

			Deselect();
		}

		_sending = false;
	}
}
