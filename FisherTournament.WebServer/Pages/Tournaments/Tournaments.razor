@page "/tournaments"

@using FisherTournament.Application.Competitions.Queries.GetTournamentCompetitions;
@using FisherTournament.Application.Competitions.Queries.SearchCompetitions;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentsSummary;
@using System.Globalization;

@inject NavigationManager _nav
@inject IToastService _toast
@inject ISender _sender

<div class="px-4">
	<div class="mb-4 flex w-full flex-row items-center justify-between">
		<h1 class="page-title">Torneos/Fechas</h1>

		<FluentButton OnClick="@(() => _nav.NavigateTo("/tournaments/add"))"
						IconStart="@(new Icons.Regular.Size16.AddCircle())" 
						Appearance="Appearance.Accent">
			Agregar Torneo
		</FluentButton>
	</div>


	<FluentLabel Typo="Typography.H3">En curso</FluentLabel>
	@* <FluentDivider class="mt-1" /> *@

	@* <CenteredSectionSeparator Class="mb-7">
		<CustomChild>
			<FluentLabel Typo="Typography.H3">En curso</FluentLabel>
		</CustomChild>
	</CenteredSectionSeparator> *@

	<div class="flex gap-4">
		@foreach (var tournament in OngoingTournaments)
		{
			<FluentCard class="mt-4 flex h-fit w-fit flex-col px-4 pb-2.5 pt-2.5" Style="min-width: 620px;">
				<div class="flex flex-row">
					@* <FluentLabel Class="pt-2.5" Typo="Typography.H6" Color="Color.Disabled">Torneo: </FluentLabel> *@

					<div class="flex w-full flex-row items-center gap-x-5">
						<FluentLabel Typo="Typography.H4">@tournament.tournament.Name</FluentLabel>
						<FluentNavLink Href="@("/tournament/"+tournament.tournament.Id)" Class="flex gap-x-2">
							Ir al torneo
							<FluentIcon Value="@(new Icons.Regular.Size16.ArrowRight())" Class="align-middle" />
						</FluentNavLink>

						<FluentNavLink Href="@("/tournament/"+tournament.tournament.Id+"/add/inscription")" Class="flex gap-x-2">
							Agregar Inscripción
							<FluentIcon Value="@(new Icons.Regular.Size16.ArrowRight())" Class="align-middle" />
						</FluentNavLink>

						<FluentNavLink Href="@("/tournament/"+tournament.tournament.Id+"/add/score")" Class="flex gap-x-2">
							Agregar Puntaje
							<FluentIcon Value="@(new Icons.Regular.Size16.ArrowRight())" Class="align-middle" />
						</FluentNavLink>
					</div>
				</div>

				<div class="flex flex-row pt-2.5">
					<FluentLabel Class="whitespace-nowrap pr-3" Typo="Typography.H6" Color="Color.Accent">Fecha Inicio del torneo </FluentLabel>

					<div class="flex w-full flex-row items-center">
						<FluentLabel Typo="Typography.Body">@tournament.tournament.StartDate.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)</FluentLabel>
					</div>
				</div>

				@if (tournament.Competitions.Count() == 0)
				{
					<div class="flex flex-row pt-2.5">
						<FluentLabel Class="whitespace-nowrap pr-3" Typo="Typography.H6" Color="Color.Accent">Fechas del torneo proximas o en curso </FluentLabel>

						<div class="flex w-full flex-row items-center">
							<FluentLabel Typo="Typography.Body">El torneo todavía no tiene fechas</FluentLabel>
						</div>
					</div>
				} else {
					<FluentLabel Class="pt-2.5" Typo="Typography.H6" Color="Color.Accent">Fechas proximas o en curso del torneo</FluentLabel>

					<FluentDataGrid 
						Class="mt-1" 
						TGridItem="GetTournamentCompetitionsQueryResult" 
						Items="@(tournament.Competitions.Where(c => c.EndDate is null || (c.EndDate.HasValue && c.EndDate.Value >= DateTime.UtcNow)).AsQueryable())" 
						GridTemplateColumns="0.18fr 0.8fr 0.3fr 0.5fr">
						<ChildContent>
							<PropertyColumn Title="N°" Align="Align.Center" Property="@(c => c.N)" />

							<TemplateColumn Title="Fecha Inicio" Align="Align.Center">
								@context.StartDate.ToLocalTime().ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
							</TemplateColumn>

							<TemplateColumn Title="Ranking" Align="Align.Center">
								<FluentNavLink Class="center-fluent-nav-icon flex w-full justify-center gap-x-2 whitespace-nowrap underline"
											   Href="@("/tournament/"+tournament.tournament.Id+"/leaderboard/"+@context.Id)"
											   Style="color: var(--accent-fill-rest);">
									<FluentIcon Value="@(new Icons.Regular.Size16.Trophy())" Class="align-middle" />
								</FluentNavLink>
							</TemplateColumn>

							<TemplateColumn Title="Ir a modo notario" Align="Align.Center">
								<FluentNavLink Class="center-fluent-nav-icon flex w-full justify-center gap-x-2 whitespace-nowrap underline"
											   Href="@("/notary/tournament/"+tournament.tournament.Id+"/competition/"+@context.Id)"
											   Style="color: var(--accent-fill-rest);">
									<FluentIcon Value="@(new Icons.Regular.Size16.NotepadPerson())" Class="align-middle" />
								</FluentNavLink>
							</TemplateColumn>
						</ChildContent>
						<EmptyContent>
							<div Style="min-height: 100px;" class="empty-content flex items-center pt-2">
								&nbsp; Todavía no hay competiciones.
							</div>
						</EmptyContent>
					</FluentDataGrid>
				}
			</FluentCard>
		}
	</div>

	@if (OngoingTournaments.Count == 0)
	{
		<div Style="min-height: 100px;" class="flex w-full flex-row items-center justify-center">
			<FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Disabled" />
			&nbsp; No hay torneos en curso.
		</div>
	}


	<FluentLabel Typo="Typography.H3" Class="mb-10 pt-14">Buscar fecha</FluentLabel>
	@* <FluentDivider class="mb-4" /> *@
	@* <CenteredSectionSeparator Class="mb-10 mt-16">
		<CustomChild>
			<FluentLabel Typo="Typography.H3">Buscar fecha</FluentLabel>
		</CustomChild>
	</CenteredSectionSeparator> *@

	<div class="mb-4 flex w-full flex-row justify-center gap-10">
		<div>
			<FluentSelect
				Items="@(Enumerable.Range(DateTime.Now.Year-5, 6))"
				@bind-Value="SelectedYear"
				OptionText="@(i => i.ToString())" 
				OptionValue="@(i => i.ToString())" 
				@oninput=SearchByYearAsync>
				<LabelTemplate>
					Año del torneo
				</LabelTemplate>
			</FluentSelect>
		</div>

		<FluentNumberField @oninput=SearchByNumberAsync @bind-Value="SelectedNumber" TValue="int">
			<div slot="start">N°</div> Número de la fecha
		</FluentNumberField>
	</div>

	<FluentDataGrid @ref="competitionSearchFluentDataGrid"
					ItemsProvider="competitionSearchItemsProviderCall"
					TGridItem="SearchCompetitionsQueryResult"
					Pagination="@competitionSearchPagination"
					GridTemplateColumns="0.15fr 0.4fr 0.3fr 0.3fr 0.7fr">
		<ChildContent>
			<PropertyColumn Property="@(p => p.N)" Sortable="false" Title="N°" />
			<PropertyColumn Property="@(p => p.TournamentName)" Sortable="false" Title="Nombre del torneo" />
			<PropertyColumn Property="@(p => p.StartDate)" Format="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern" Sortable="false" Title="Inicio de la fecha" />
			<PropertyColumn Property="@(p => p.EndDate)" Format="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern" Sortable="false" Title="Fin de la fecha" />
			<TemplateColumn Title="Acciones" Align="@Align.End">
				<FluentButton IconEnd="@(new Icons.Regular.Size16.Share())" OnClick="@(() => GoToTournament(context))">
				Ir al torneo
				</FluentButton>

				<FluentButton IconEnd="@(new Icons.Regular.Size16.Share())" OnClick="@(() => GoToLeaderboard(context))">
				Tabla de posiciones
				</FluentButton>
			</TemplateColumn>
		</ChildContent>

		<EmptyContent>
			<div Style="min-height: 100px;" class="empty-content">
				<FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Disabled" />
				&nbsp; No se encontraron competiciones.
			</div>
		</EmptyContent>
	</FluentDataGrid>

	@* @if (competitionSearchPagination.TotalItemCount > 0) *@

		<FluentPaginator State="@competitionSearchPagination" />


	<FluentLabel Typo="Typography.H3" Class="mb-10 pt-14">Buscar torneo</FluentLabel>
	@* <FluentDivider class="mb-4" /> *@
	@* <CenteredSectionSeparator Class="mb-10 mt-16">
			<CustomChild>
				<FluentLabel Typo="Typography.H3">Buscar torneo</FluentLabel>
			</CustomChild>
	</CenteredSectionSeparator> *@

	<div class="mb-4 flex w-full flex-row justify-center gap-10">
		<div>
			<FluentSelect Items="@(Enumerable.Range(DateTime.Now.Year-5, 6))"
			@bind-Value="SelectedYear"
						  OptionText="@(i => i.ToString())"
						  OptionValue="@(i => i.ToString())"
			@oninput=SearchByYearAsync>
				<LabelTemplate>
					Año del torneo
				</LabelTemplate>
			</FluentSelect>
		</div>
	</div>

	<FluentDataGrid @ref="tournamentSummaryFluentDataGrid"
					ItemsProvider="tournamentSummaryItemsProviderCall"
					TGridItem="GetTournamentsSummaryQueryResult"
					Pagination="@tournamentSummaryPagination"
					GridTemplateColumns="0.3fr 0.2fr 0.2fr 1fr">
		<ChildContent>
			<PropertyColumn Property="@(p => p.Name)" Sortable="false" Title="Nombre" />
			<PropertyColumn Property="@(p => p.StartDate)" Format="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern" Sortable="false" Title="Fecha inicio" />
			<PropertyColumn Property="@(p => p.EndDate)" Format="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern" Sortable="false" Title="Fecha fin" />

			<TemplateColumn Title="Acciones" Align="@Align.End">
				<FluentButton IconEnd="@(new Icons.Regular.Size16.Share())" OnClick="@(() => GoToInscriptions(context))">
				@context.InscriptionsCount Inscripciones	
				</FluentButton>

				<FluentButton IconEnd="@(new Icons.Regular.Size16.Share())" OnClick="@(() => GoToCompetitions(context))">
					@context.CompetitionsCount Competencias
				</FluentButton>

				<FluentButton IconEnd="@(new Icons.Regular.Size16.Share())" OnClick="@(() => GoToCategories(context))">
					@context.CategoriesCount Categorias
				</FluentButton>

				<FluentButton IconEnd="@(new Icons.Regular.Size16.Share())" OnClick="@(() => GoToTournament(context))">
				Ir al torneo	
				</FluentButton>
			</TemplateColumn>
		</ChildContent>

		<EmptyContent>
			<div Style="min-height: 100px;" class="empty-content">
				<FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Disabled" />
				&nbsp; No se encontraron torneos.
			</div>
		</EmptyContent>
	</FluentDataGrid>

	<FluentPaginator State="@tournamentSummaryPagination" />

	<div class="mb-10"></div>
</div>

@code {
	record struct TournamentSummary(GetTournamentsSummaryQueryResult tournament, IEnumerable<GetTournamentCompetitionsQueryResult> Competitions);

	List<TournamentSummary> OngoingTournaments = new();

	string SelectedYear = DateTime.Now.Year.ToString();
	private string _selectedYear = DateTime.Now.Year.ToString();

	private int SelectedNumber = 1;
	private int _selectedNumber = 1;


	GridItemsProvider<SearchCompetitionsQueryResult> competitionSearchItemsProviderCall = default!;
	PaginationState competitionSearchPagination = new PaginationState { ItemsPerPage = 5 };
	FluentDataGrid<SearchCompetitionsQueryResult> competitionSearchFluentDataGrid = default!;

	GridItemsProvider<GetTournamentsSummaryQueryResult> tournamentSummaryItemsProviderCall = default!;
	PaginationState tournamentSummaryPagination = new PaginationState { ItemsPerPage = 5 };
	FluentDataGrid<GetTournamentsSummaryQueryResult> tournamentSummaryFluentDataGrid = default!;

	protected override async Task OnInitializedAsync()
	{
		await GetOngoingTournaments();

		tournamentSummaryItemsProviderCall = async req =>
		{
			var query = new GetTournamentsSummaryQuery(
				Ended: null, 
				TournamentYear: Int32.Parse(_selectedYear), 
				tournamentSummaryPagination.CurrentPageIndex + 1, 
				tournamentSummaryPagination.ItemsPerPage);

			var result = await _sender.Send(query);

			if (result.IsError)
			{
				_toast.ShowErrors(result.Errors);
				return GridItemsProviderResult.From(
					items: new List<GetTournamentsSummaryQueryResult>(),
					totalItemCount: 0
				);
			}

			return GridItemsProviderResult.From(
				items: result.Value.Items,
				totalItemCount: result.Value.TotalCount
			);
		};

		competitionSearchItemsProviderCall = async req =>
		{
			var query = new SearchCompetitionsQuery(
				Int32.Parse(_selectedYear), 
				_selectedNumber, 
				competitionSearchPagination.CurrentPageIndex + 1, 
				competitionSearchPagination.ItemsPerPage);

			var result = await _sender.Send(query);

			if (result.IsError)
			{
				_toast.ShowErrors(result.Errors);
				return GridItemsProviderResult.From(
					items: new List<SearchCompetitionsQueryResult>(),
					totalItemCount: 0
				);
			}

			return GridItemsProviderResult.From(
				items: result.Value.Items,
				totalItemCount: result.Value.TotalCount
			);
		};
	}

	async Task GetOngoingTournaments()
	{
		var query = new GetTournamentsSummaryQuery(
				Ended: false,
				TournamentYear: DateTime.Now.Year,
				1,
				2);

		var result = await _sender.Send(query);

		if (result.IsError)
		{
			_toast.ShowErrors(result.Errors);
			OngoingTournaments = new();
		}

		var tournamentSummariesTasks = result.Value.Items.Select(async t =>
		{
			var query = new GetTournamentCompetitionsQuery(t.Id);

			var result = await _sender.Send(query);

			if (result.IsError)
			{
				_toast.ShowErrors(result.Errors);
				return new TournamentSummary(t, new List<GetTournamentCompetitionsQueryResult>());
			}

			return new TournamentSummary(t, result.Value);
		});

		OngoingTournaments = (await Task.WhenAll(tournamentSummariesTasks)).ToList();
	}

	Task SearchByYearAsync(ChangeEventArgs e)
	{
		_selectedYear = e.Value?.ToString() ?? string.Empty;
		return Task.WhenAll(
			competitionSearchFluentDataGrid.RefreshDataAsync(),
			tournamentSummaryFluentDataGrid.RefreshDataAsync()
		);
	}

	Task SearchByNumberAsync(ChangeEventArgs e)
	{
		if (Int32.TryParse((string?)e.Value, out var res))
		{
			_selectedNumber = res;
		} else {
			_selectedNumber = 1;
		}
	
		return competitionSearchFluentDataGrid.RefreshDataAsync();
	}

	void GoToTournament(SearchCompetitionsQueryResult s)
	{
		_nav.NavigateTo("/tournament/"+s.TournamentId);		
	}

	void GoToTournament(GetTournamentsSummaryQueryResult s)
	{
		_nav.NavigateTo("/tournament/"+s.Id);
	}

	void GoToInscriptions(GetTournamentsSummaryQueryResult s)
	{
		_nav.NavigateTo("/tournament/"+s.Id+"/inscriptions");
	}

	void GoToCompetitions(GetTournamentsSummaryQueryResult s)
	{
		_nav.NavigateTo("/tournament/"+s.Id+"/competitions");
	}

	void GoToCategories(GetTournamentsSummaryQueryResult s)
	{
		_nav.NavigateTo("/tournament/"+s.Id+"/categories");
	}

	void GoToLeaderboard(SearchCompetitionsQueryResult s)
	{
		_nav.NavigateTo("/tournament/"+s.TournamentId+"/leaderboard/"+s.Id);
	}
}
