@layout TournamentLayout
@page "/tournament/{TournamentId}/competition/{CompetitionId}"

@using FisherTournament.Application.Competitions.Commands.EditCompetition;
@using FisherTournament.Application.Competitions.Queries.GetCompetition;
@using FisherTournament.Application.Fishers.Queries;
@using FisherTournament.Contracts.Competitions;
@using FisherTournament.Domain.FisherAggregate.ValueObjects;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject IMapper _mapper

<EditForm class="relative h-full" EditContext="_editContext" OnSubmit="Submit">
	<h1 class="page-title-no-pt">Editar Competición</h1>

	<p class="color-fg m-0"></p>
	<FluentDivider class="mb-4 mt-1" />

	<div class="flex flex-col items-start gap-y-5">
		<div>
			<FluentDatePicker @bind-Value="@SelectedDate">
				@* TODO: No deberia ser simplemente fecha de la competencia? *@
				<LabelTemplate>
					Fecha de Inicio <span class="red">*</span>
				</LabelTemplate>
			</FluentDatePicker>
			<FluentTimePicker @bind-Value="@SelectedDate" Label="" />
			<ValidationMessage For="() => Model!.StartDateTime" />
		</div>

		@if (EndDate is not null)
		{
			<div class="flex flex-row items-end gap-x-5">
				<div>
					<FluentDatePicker @bind-Value="@EndDate" Disabled="true">
						<LabelTemplate>
							Fecha de Fin
						</LabelTemplate>
					</FluentDatePicker>
				</div>

				<FluentCheckbox
					class="pb-2"
					@bind-Value="@EndCompetitionFlag">Marcar como sin finalizar</FluentCheckbox>
			</div>
		} else
		{
			<div class="flex flex-row items-end gap-x-5">
				<div>
					<FluentTextField Value="Sin finalizar" Disabled="true" Appearance="FluentInputAppearance.Outline">
						<LabelTemplate>
							Fecha de Fin
						</LabelTemplate>
					</FluentTextField>
				</div>

				<FluentCheckbox class="pb-2" @bind-Value="@EndCompetitionFlag">Marcar como finalizada</FluentCheckbox>
			</div>
		}
		<ValidationMessage For="() => Model!.CompetitionFinishedState" />
	</div>


	<FluentGrid Class="items-end">
		<FluentGridItem sm="12" md="6">
			<p class="color-fg m-0 mt-16">Lugar de la competencia</p>
		</FluentGridItem>

		<FluentGridItem sm="12" md="6" Class="flex justify-end">
		
		</FluentGridItem>
	</FluentGrid>
	<FluentDivider class="mb-4 mt-1" />

	<div class="flex w-full flex-row justify-evenly">
		<div>
			<FluentTextField
				AutoComplete="off"
				@bind-Value=Place>
				Direccion/Nombre del lugar
				&nbsp;&nbsp;&nbsp;
				<FluentBadge Appearance="Appearance.Neutral" Fill="lowlight" BackgroundColor="#000" Color="#fff">Opcional</FluentBadge>
			</FluentTextField>
			<ValidationMessage For="() => Model!.Location" />
		</div>
	</div>

	<div class="absolute bottom-0 mb-4 mt-6 flex w-full flex-row justify-center gap-24">
		<FluentButton Appearance="Appearance.Stealth" OnClick="Cancel">Cancelar</FluentButton>
		<FluentButton 
				IconStart="@(new Icons.Regular.Size16.Checkmark())" 
				Appearance="Appearance.Accent"
				Type="ButtonType.Submit">Guardar</FluentButton>
	</div>
</EditForm>

@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	[Parameter]
	public string CompetitionId { get; set; } = null!;

	GetCompetitionQueryResponse competition = default!;

	EditCompetitionRequest Model { get; set; } = default!;

	private DateTime? SelectedDate { 
		get
		{
			return (Model.StartDateTime ?? competition.StartDateTime).ToLocalTime();
		}

		set
		{
			if (value is not null) {
				Model.StartDateTime = value.Value.ToUniversalTime();
			}
		}
	}

	private bool EndCompetitionFlag
	{
		get
		{
			return Model.CompetitionFinishedState.HasValue;
		}

		set
		{
			// EndTime Has value -> CompetitionFinishedState = false = mark it as not finished
			Model.CompetitionFinishedState = value ? !competition.EndDateTime.HasValue : null;
		}
	}

	private string Place {
		// TODO: Use separate fields for city, state, etc

		get {
			return Model.Location is null ? GetInlineLocation(competition) : GetInlineLocation(Model);
		}

		set {
			if (Model.Location is null) {
				Model.Location = new()
				{
					City = competition.Location.City,
					State = competition.Location.State,
					Country = competition.Location.Country,
					Place = competition.Location.Place
				};
			}

			Model.Location.Place = value;
		}
	}

	DateTime? EndDate { 
		get 
		{
			return competition.EndDateTime;
		}

		set {}
	}

	EditContext _editContext = default!;
	ValidationMessageStore _validationMessageStore = default!;

	private bool _shouldExit = false;

	private bool _sending = false;

	protected async override Task OnInitializedAsync()
	{
		var query = new GetCompetitionQuery(CompetitionId);
		var result = await _sender.Send(query);

		if (result.IsError) {			
			_toastService.ShowErrors(result.Errors);
			_shouldExit = true; 
		}

		competition = result.Value;

		Model = new();
		_editContext = new EditContext(Model);
		_validationMessageStore = new ValidationMessageStore(_editContext);
	}

	protected override void OnAfterRender(bool _)
	{
		if (_shouldExit) _nav.NavigateTo("/404");
	}

	void Cancel()
	{
		_js.GoBack();
	}

	async Task Submit()
	{
		if (!_editContext.Validate() || _sending) return;

		_sending = true;

		var command = _mapper.Map<EditCompetitionCommand>((Model, CompetitionId));
		var res = await _sender.Send(command);

		if (res.IsError)
		{
			_editContext.AddValidationErrors(res.Errors, _validationMessageStore, Model, _toastService);
		}
		else
		{
			_toastService.ShowSuccess("Competición editada");
			await _js.GoBack();
		}

		_sending = false;
	}

	private string GetInlineLocation(GetCompetitionQueryResponse competition)
	{
		string location = string
			.Join(", ", new[] { competition.Location.City, competition.Location.State, competition.Location.Country, competition.Location.Place }
						.Where(x => !string.IsNullOrEmpty(x))
			);

		return location;
	}

	private string GetInlineLocation(EditCompetitionRequest competition)
	{
		if (competition.Location is null) return "";

		string location = string
			.Join(", ", new[] { competition.Location.City, competition.Location.State, competition.Location.Country, competition.Location.Place }
						.Where(x => !string.IsNullOrEmpty(x))
			);

		return location;
	}
}