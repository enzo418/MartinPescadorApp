@layout TournamentLayout
@page "/tournament/{TournamentId}/add/inscription"

@using FisherTournament.Application.Fishers.Queries;
@using FisherTournament.Application.Tournaments.Commands.AddInscription;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.Contracts.Tournaments;
@using FisherTournament.Domain.FisherAggregate.ValueObjects;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IMapper _mapper
@inject IJSRuntime _js

<div class="relative h-full">
	<div class="flex w-full flex-row items-center justify-between">
		<h1 class="page-title-no-pt">Agregar Inscripción</h1>

		<FluentSwitch @bind-Value="@_exitOnSave" Label="Volver al guardar" />
	</div>

	@* <p class="color-fg m-0">Selecciona el Pescador</p>
	<FluentDivider class="mb-4 mt-1" />
	 *@
	<CenteredSectionSeparator Class="mb-7 mt-10">Pescador</CenteredSectionSeparator>

	<div class="flex flex-col items-center">
		<div class="flex flex-row items-end gap-4">
			<div>
				<FluentTextField 
					@bind-Value="_searchNameInput"
					Placeholder="Nombre"
					AutoComplete="off"
					Label="Buscar por nombre"
					@oninput="@OnInput"
					Disabled="@(selected is not null)">
					<FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral" />
				</FluentTextField>
			</div>
			@* <FluentButton IconStart="@(new Icons.Regular.Size16.Search())" OnClick="Buscar">Buscar</FluentButton> *@
		</div>

		@if (selected is not null)
		{
			<FluentCard class="mt-4" style="height:100px;width:500px">
				<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
					<div class="flex flex-col gap-2">
						<div>
							<span class="color-fg font-bold">Nombre</span>
							<span class="color-fg">@(selected?.Name)</span>
						</div>

						<div>
							<span class="color-fg font-bold">DNI</span>
							<span class="color-fg">@selected?.DNI</span>
						</div>
					</div>

					<p style="color: var(--accent-fill-rest);">
						@* <FluentIcon Value="@(new Icons.Regular.Size24.Checkmark())" /> *@
						Seleccionado
					</p>
				</div>
			</FluentCard>
		} else {
			@foreach (var persona in searchResult)
			{
				<FluentCard class="mt-4" style="height:100px;width:500px">
					<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
						<div class="flex flex-col gap-2">
							<div>
								<span class="color-fg font-bold">Nombre</span>
								<span class="color-fg">@persona.Name</span>
							</div>

							<div>
								<span class="color-fg font-bold">DNI</span>
								<span class="color-fg">@persona.DNI</span>
							</div>
						</div>

						<FluentButton 			
							IconStart="@(new Icons.Regular.Size16.Checkmark())" 
							@onclick="@(() => Select(persona))"
							Appearance="Appearance.Accent">
							Seleccionar
						</FluentButton>
					</div>
				</FluentCard>
			}

		@if (searchResult.Count == 1)
			{
				<FluentCard class="dashed-rect mt-4" style="height:100px;width:500px">
					<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
						<span class="color-fg">Solo hubo un resultado</span>

						<FluentButton 
							IconStart="@(new Icons.Regular.Size16.Add())"
							Appearance="Appearance.Outline"
							OnClick="AgregarPescador">Agregar pescador</FluentButton>
					</div>
				</FluentCard>
			}

		@if (_searched && searchResult.Count == 0) {
				<FluentCard class="dashed-rect mt-4" style="height:100px;width:500px">
					<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
						<span class="color-fg">No se encontraron pescadores</span>

						<FluentButton 
							IconStart="@(new Icons.Regular.Size16.Add())"
							Appearance="Appearance.Outline"
							OnClick="AgregarPescador">Agregar pescador</FluentButton>
					</div>
				</FluentCard>
			}
		}

	</div>

	@if (selected is not null)
	{
		@* <p class="color-fg m-0 mt-16">Selecciona la categoría e ingresa el número</p>
		<FluentDivider class="mb-4 mt-1" /> *@
		<CenteredSectionSeparator Class="mb-7 mt-16">Inscripción</CenteredSectionSeparator>

		<div class="flex w-full flex-row justify-evenly">
			<div>
				<FluentSelect Items=_categories
				OptionText="@(i => i.Name)"
				OptionValue="@(i => i.Id)"
				@bind-Value="@_selectedCategoryId"
				OptionDisabled="@(t => _noCategories)">
					<LabelTemplate>
						Categoría <span class="red">*</span>
					</LabelTemplate>
				</FluentSelect>
			</div>

			@* TODO: Numero should only be set if the fisher doesn't have one *@

			<FluentNumberField @bind-Value=_selectedNumber Required="true">
				Número <span class="red">*</span>
			</FluentNumberField>
		</div>

		<div class="absolute bottom-0 mb-6 mt-6 flex w-full flex-row justify-center gap-24">
			<FluentButton Appearance="Appearance.Stealth" OnClick="Cancel">Limpiar campos</FluentButton>
			<FluentButton 
					Disabled=!CanSave()
					IconStart="@(new Icons.Regular.Size16.Checkmark())" 
					Appearance="Appearance.Accent"
					OnClick="Save">Guardar</FluentButton>
		</div>
	}
</div>


@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	record struct Persona(string Id, string Name, string DNI);
	List<GetTournamentCategoriesQueryResult> _categories = new();
	bool _noCategories = false;

	string _searchNameInput = string.Empty; // from @bind-Value value
	string _searchName = string.Empty; // built from input event
	bool _searched = false;

	Persona? selected;
	string _selectedCategoryId = string.Empty;
	int? _selectedNumber;

	List<Persona> searchResult = new();

	AddInscriptionRequest Request = new();

	private bool _exitOnSave = false;

	protected override async Task OnInitializedAsync()
	{
		var uri = new Uri(_nav.Uri);

		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var searchParam) 
				&& searchParam != StringValues.Empty)
		{
			_searchNameInput = searchParam!;
			_searchName = searchParam!;
			await SearchFisher();
		}

		// Search categories

		var query = new GetTournamentCategoriesQuery(TournamentId);
		var categoriesRes = await _sender.Send(query);

		if (categoriesRes.IsError)
		{
			_toastService.ShowErrors(categoriesRes.Errors);
		} else
		{
			_noCategories = false;

			_categories = categoriesRes.Value.Where(c => c.Name != "General").ToList();
			if (_categories.Count > 0) _selectedCategoryId = _categories[0].Id;
			else if (_categories.Count == 0){
				_noCategories = true;
				_categories = new List<GetTournamentCategoriesQueryResult>() { new GetTournamentCategoriesQueryResult("_", "No hay categorías") };
			}
		}
	}

	void Select(Persona p)
	{
		selected = p;
	}

	void Cancel()
	{
		selected = null;
	}

	bool CanSave()
	{
		return selected is not null && _selectedCategoryId != string.Empty && _selectedNumber is not null;
	}

	async Task Save()
	{
		if (!CanSave()) return;

		Request.FisherId = selected!.Value.Id;
		Request.CategoryId = _selectedCategoryId;
		Request.Number = _selectedNumber!.Value;

		var command = _mapper.Map<AddInscriptionCommand>((Request, TournamentId));
		var res = await _sender.Send(command);

		if (res.IsError)
		{
			_toastService.ShowErrors(res.Errors);
		} else
		{
			_toastService.ShowSuccess("Inscripción agregada");
			
			if (_exitOnSave) await _js.GoBack();
		}
	}

	async Task OnInput(ChangeEventArgs e)
	{
		_searchName = e.Value?.ToString() ?? string.Empty;

		await SearchFisher();
	}

	void AgregarPescador()
	{
		_nav.NavigateTo("/fishers/add");
	}

	async Task SearchFisher() {
		_searched = true;

		GetFishersQuery query = new(_searchName, "", 1, 2);

		var result = await _sender.Send(query);

		if (result.IsError)
		{
			_toastService.ShowErrors(result.Errors);
			return;
		}

		searchResult = result.Value.Items.Select(i => new Persona(i.Id, $"{i.LastName} {i.FirstName}", i.DNI)).ToList();
		
		string uriWithoutQuery = _nav.Uri.Split('?')[0];
		string newUriWithSearch = $"{uriWithoutQuery}?search={_searchName}";

		_nav.NavigateTo(newUriWithSearch, false, true);
	}
}