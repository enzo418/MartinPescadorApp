@layout TournamentLayout

@page "/tournament/{TournamentId}/competitions"
@using System.Globalization;
@using FisherTournament.Application.Competitions.Commands.DeleteCompetition;
@using FisherTournament.Application.Competitions.Queries.GetTournamentCompetitions;

@inject IToastService _toastService
@inject IDialogService _dialogService
@inject NavigationManager _nav
@inject ISender _sender

<FluentGrid>
    <FluentGridItem sm="12" md="6">
        <h1 class="page-title-no-pt">Competiciones</h1>
    </FluentGridItem>

    <FluentGridItem sm="12" md="6" Class="flex justify-end">
        <FluentButton Appearance="Appearance.Accent"
                      IconStart="@(new Icons.Regular.Size16.Add())"
                      OnClick="@(() => _nav.NavigateTo($"/tournament/{TournamentId}/add/competition"))">Agregar Competición</FluentButton>
    </FluentGridItem>
</FluentGrid>

<FluentDataGrid Items="@competitions" GridTemplateColumns="0.1fr 0.8fr 0.3fr 0.6fr 0.3fr">
	<ChildContent>
		<PropertyColumn Title="N°" Property="@(c => c.N)" />

		<TemplateColumn Title="Fecha Inicio">
			@context.StartDate.ToLocalTime().ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
		</TemplateColumn>

		<TemplateColumn Title="Fecha Fin">
			@context.EndDate?.ToLocalTime().ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)
		</TemplateColumn>

		<TemplateColumn Title="Lugar">
			@GetInlineLocation(context)
		</TemplateColumn>

		<TemplateColumn Title="Acciones" Align="@Align.End">
			<FluentButton Class="underline"
				Appearance="Appearance.Lightweight"
				IconEnd="@(new Icons.Regular.Size16.Open())" 
				OnClick="@(() => GoToPositions(context))">Tabla de posiciones</FluentButton>
			<FluentButton
						  IconEnd="@(new Icons.Regular.Size24.Edit())"
						  OnClick="@(() => Edit(context))" />
			<FluentButton
				IconEnd="@(new Icons.Regular.Size24.Delete().WithColor("red"))" 
				OnClick="@(() => Delete(context))" />
		</TemplateColumn>
	</ChildContent>

	<EmptyContent>
		<div Style="min-height: 300px;" class="empty-content flex items-center pt-2">
			<FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
			&nbsp; Todavía no hay competiciones.
		</div>
	</EmptyContent>
</FluentDataGrid>

@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	IQueryable<GetTournamentCompetitionsQueryResult> competitions = new List<GetTournamentCompetitionsQueryResult>().AsQueryable();

	protected override async Task OnInitializedAsync()
	{
		await GetCompetitions();
	}

	private async Task GetCompetitions()
	{
		var query = new GetTournamentCompetitionsQuery(TournamentId);
		var res = await _sender.Send(query);
		if (res.IsError)
		{
			_toastService.ShowErrors(res.Errors);
		} else
		{
			competitions = res.Value.AsQueryable();
		}
	}

	void Edit(GetTournamentCompetitionsQueryResult competition)
	{
		_nav.NavigateTo($"/tournament/{TournamentId}/competition/{competition.Id}");
	}

	async Task Delete(GetTournamentCompetitionsQueryResult competition)
	{
		var dialog = await _dialogService.ShowConfirmationAsync(
			$"Eliminar la competición N° {competition.N}?",
			"Eliminar",
			"Cancelar",
			"Eliminar Competición");

		var result = await dialog.Result;
		if (!result.Cancelled)
		{

			var command = new DeleteCompetitionCommand(competition.Id);
			var res = await _sender.Send(command);
			if (res.IsError)
			{
				_toastService.ShowErrors(res.Errors);
			}
			else
			{
				_toastService.ShowSuccess($"Eliminada competición N° {competition.N}");
				await GetCompetitions();
			}
		}
	}

	void GoToPositions(GetTournamentCompetitionsQueryResult competition)
	{
		_nav.NavigateTo($"/tournament/{TournamentId}/leaderboard/{competition.Id}");
	}

	private string GetInlineLocation(GetTournamentCompetitionsQueryResult competition)
	{
		string location = string
			.Join(", ", new[] { competition.Location.City, competition.Location.State, competition.Location.Country, competition.Location.Place }
						.Where(x => !string.IsNullOrEmpty(x))
			);

		return location;
	}

}
