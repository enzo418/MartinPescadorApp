@layout TournamentLayout
@page "/tournament/{TournamentId}/categories"

@using FisherTournament.Application.Tournaments.Commands.AddCategory;
@using FisherTournament.Application.Tournaments.Commands.DeleteCategory;
@using FisherTournament.Application.Tournaments.Commands.EditCategory;
@using FisherTournament.Application.Tournaments.Queries.GetTournament;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject ISender _sender

<FluentGrid>
    <FluentGridItem sm="12" md="6">
        <h1 class="page-title-no-pt">Categorias</h1>
    </FluentGridItem>

    <FluentGridItem sm="12" md="6" Class="flex justify-end items-center">
        
        <FluentSwitch @bind-Value="@_canEdit" title="Editar">
            <span class="label">Editar</span>
            <span slot="unchecked-message">
                <FluentIcon class="align-middle" Icon="Icons.Regular.Size20.LockClosed" Color="Color.Neutral" />
            </span>
            <span slot="checked-message">
                <FluentIcon class="align-middle" Icon="Icons.Regular.Size20.Edit" Color="Color.Neutral" />
            </span>
        </FluentSwitch>
        
        <FluentDivider Style="height: 20px;" Class="mx-2" Role="DividerRole.Separator"
                       Orientation="Orientation.Vertical">
        </FluentDivider>

        <FluentButton Appearance="Appearance.Accent"
                      IconStart="@(new Icons.Regular.Size16.Add())"
                      @onclick="@(v => OnNewCategoryClicked())"><b>Agregar categoría</b></FluentButton>
    </FluentGridItem>
</FluentGrid>


<FluentDataGrid Items="@cats">
    <ChildContent>
        <TemplateColumn Title="Categoría">
            @if(_canEdit && context.Name != GeneralCategoryName)
			{
		        <FluentTextField 
                    Value="@context.Name"
                    ValueChanged="@((v) => OnNameChanged(context.Name, context, v))"
                    tabindex="@(GetCatIndex(context)+1)" />
            } else
            {
                <FluentLabel class="p-1">@context.Name</FluentLabel>
            }
        </TemplateColumn>
        
        @*
        <TemplateColumn Title="Edad límite">
            <div class="flex flex-row">
                <FluentNumberField 
                    Value="context.minAge"
                    @onchange="@(v => OnMinAgeChanged(context, v))"
                    tabindex="@(GetCatIndex(context)+2)" />
                <span      
                    class="flex flex-col justify-center mx-3 color-fg">
                    hasta
                </span>
                <FluentNumberField 
                    Value="context.MaxAge"
                    @onchange="@(v => OnMaxAgeChanged(context, v))"
                    tabindex="@(GetCatIndex(context)+3)" />
            </div>
        </TemplateColumn>
        *@

        <TemplateColumn Title="Acciones" Align="@Align.End">
            @if (context.Name != GeneralCategoryName) {
                <FluentButton 
                    IconEnd="@(new Icons.Regular.Size24.Delete().WithColor("red"))" 
                    Disabled=!_canEdit 
                    OnClick="@(() => Delete(context))" />
            }
        </TemplateColumn>
    </ChildContent>

    <EmptyContent>
        <div Style="min-height: 300px;" class="flex items-center empty-content pt-4">
            <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
            &nbsp; No se encontraron categorías.
        </div>
    </EmptyContent>
</FluentDataGrid>


@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    private bool _canEdit = false;

    int _tabIndex = 0;

    string GeneralCategoryName = "General";

    IQueryable<GetTournamentCategoriesQueryResult> cats = new List<GetTournamentCategoriesQueryResult>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        var query = new GetTournamentQuery(TournamentId);
        var res = await _sender.Send(query);
        if (!res.IsError)
        {
            _canEdit = res.Value.EndDate is null && res.Value.StartDate > DateTime.UtcNow;
        }

        await GetCategories();
    }

    public async Task GetCategories()
    {
        var query = new GetTournamentCategoriesQuery(TournamentId);
        var res = await _sender.Send(query);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
        } else
        {
            cats = res.Value.AsQueryable();
        }
    }

    Task OnMinAgeChanged(GetTournamentCategoriesQueryResult context, ChangeEventArgs value)
    {
        _toastService.ClearSuccessToasts();
        _toastService.ShowSuccess($"Cambio guardado", 1);
        return Task.CompletedTask;
    }

    Task OnMaxAgeChanged(GetTournamentCategoriesQueryResult context, ChangeEventArgs value)
    {
        _toastService.ClearSuccessToasts();
        _toastService.ShowSuccess($"Cambio guardado", 1);
        return Task.CompletedTask;
    }

    async Task OnNameChanged(string prevName, GetTournamentCategoriesQueryResult context, ChangeEventArgs value)
    {
        string newName = value.Value?.ToString() ?? "";

        var categoryRef = cats.FirstOrDefault(c => c.Id == context.Id);

        if (newName == context.Name || string.IsNullOrEmpty(newName))
        {
            categoryRef.Name = prevName;

            StateHasChanged();

            return;
        }

        var command = new EditCategoryCommand(TournamentId, context.Id, newName);
        var res = await _sender.Send(command);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
            categoryRef.Name = prevName;
        } else
        {
            categoryRef.Name = newName;
            _toastService.ClearSuccessToasts();
            _toastService.ShowSuccess($"Cambio guardado", 1);        
        }
    }

    async Task OnNameChanged(string prevName, GetTournamentCategoriesQueryResult context, string? value)
    {
        string newName = value ?? "";

        var categoryRef = cats.FirstOrDefault(c => c.Id == context.Id);

        if (newName == context.Name || string.IsNullOrEmpty(newName))
        {
            categoryRef.Name = prevName;

            StateHasChanged();

            return;
        }

        var command = new EditCategoryCommand(TournamentId, context.Id, newName);
        var res = await _sender.Send(command);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
            categoryRef.Name = prevName;
        } else
        {
            //            categoryRef.Name = newName;
            await GetCategories();
            _toastService.ClearSuccessToasts();
            _toastService.ShowSuccess($"Cambio guardado", 1);
        }
    }

    async Task OnNewCategoryClicked()
    {
        var command = new AddCategoryCommand(TournamentId, "Nueva categoria");
        var res = await _sender.Send(command);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
        } else
        {
            _canEdit = true;
            await GetCategories();
		}
    }

    async Task Delete(GetTournamentCategoriesQueryResult context)
	{
		var command = new DeleteCategoryCommand(TournamentId, context.Id);
        var res = await _sender.Send(command);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
        } else
        {
            _toastService.ClearSuccessToasts();
            _toastService.ShowSuccess($"Categoría eliminada", 1);
            await GetCategories();
        }
	}

    void OnToggleCanEdit()
	{
		_canEdit = !_canEdit;
	}

    int GetCatIndex(GetTournamentCategoriesQueryResult context)
	{
		return cats.ToList().FindIndex(c => c.Id == context.Id);
	}
}