@layout TournamentLayout
@page "/tournament/{TournamentId}/inscription/{FisherId}"

@using FisherTournament.Application.Fishers.Queries;
@using FisherTournament.Application.Tournaments.Commands.EditInscription;
@using FisherTournament.Application.Tournaments.Queries.GetInscription;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.Contracts.Tournaments;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject IMapper _mapper

<div class="relative h-full">
	<h1 class="page-title-no-pt">Editar Inscripción</h1>

	<p class="color-fg m-0">Pescador</p>
	<FluentDivider class="mb-4 mt-1" />

	<div class="flex flex-col items-center">
		<FluentCard class="mt-4" style="height:100px;width:500px">
			<div class="flex h-full w-full flex-row items-center justify-evenly gap-14">
				<div class="flex flex-col gap-2">
					<div>
						<span class="color-fg font-bold">Nombre</span>
						<span class="color-fg">@(persona.Name)</span>
					</div>

					<div>
						<span class="color-fg font-bold">DNI</span>
						<span class="color-fg">@persona.DNI</span>
					</div>
				</div>

				<p style="color: var(--accent-fill-rest);">
					@* <FluentIcon Value="@(new Icons.Regular.Size24.Checkmark())" /> *@
					Seleccionado
				</p>
			</div>
		</FluentCard>
	</div>

	<p class="color-fg m-0 mt-16">Selecciona la categoría e ingresa el número</p>
	<FluentDivider class="mb-4 mt-1" />

	<div class="flex w-full flex-row justify-evenly">
		<div>
			<FluentSelect	Items=_categories
							OptionText="@(i => i.Name)"
							OptionValue="@(i => i.Id)"
							@bind-Value="@SelectedCategoryId">
				<LabelTemplate>
					Categoría <span class="red">*</span>
				</LabelTemplate>
			</FluentSelect>
		</div>

		<FluentNumberField @bind-Value=SelectedNumber Required="true">
			Número <span class="red">*</span>
		</FluentNumberField>
	</div>


	<div class="absolute bottom-0 mb-6 mt-6 flex w-full flex-row justify-center gap-24">
		<FluentButton Appearance="Appearance.Stealth" OnClick="Cancel">Cancelar</FluentButton>
		<FluentButton Disabled=CanSend()
				OnClick="@Save"
				IconStart="@(new Icons.Regular.Size16.Checkmark())" 
				Appearance="Appearance.Accent">Guardar</FluentButton>
	</div>
</div>


@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	[Parameter]
	public string FisherId { get; set; } = null!;

	List<GetTournamentCategoriesQueryResult> _categories = new();

	record struct Persona(string Id, string Name, string DNI);
	Persona persona;

	EditInscriptionRequest Request = null!;
	GetInscriptionResult inscription;

	string SelectedCategoryId
	{
		get
		{
			return Request.CategoryId ?? inscription.CategoryId;
		}

		set
		{
			Request.CategoryId = value;
		}
	}

	int SelectedNumber 
	{
		get
		{
			return Request.Number ?? inscription.Number;
		}

		set
		{
			Request.Number = value;
		}
	}


	private bool shouldExit = false;

	protected override async Task OnInitializedAsync()
	{
		Request = new(FisherId);

		var inscriptionQuery = new GetInscriptionQueryByFisherId(TournamentId, FisherId);
		var inscriptionRes = await _sender.Send(inscriptionQuery);

		if (inscriptionRes.IsError)
		{
			_toastService.ShowErrors(inscriptionRes.Errors);
			shouldExit = true;
		} else
		{
			inscription = inscriptionRes.Value;

			// search fisher data
			var fisherQuery = new GetFisherQuery(FisherId);

			var fisherRes = await _sender.Send(fisherQuery);

			if (fisherRes.IsError)
			{
				_toastService.ShowErrors(fisherRes.Errors);
			} else
			{
				persona = new(fisherRes.Value.Id, $"{fisherRes.Value.LastName} {fisherRes.Value.FirstName}", fisherRes.Value.DNI);
			}
		}

		// Search Categories

		var query = new GetTournamentCategoriesQuery(TournamentId);
		var categoriesRes = await _sender.Send(query);

		if (categoriesRes.IsError)
		{
			_toastService.ShowErrors(categoriesRes.Errors);
			shouldExit = true;
		} else
		{
			_categories = categoriesRes.Value.ToList();
		}
	}

	protected override void OnAfterRender(bool _)
	{
		if (shouldExit) _js.GoBack();
	}

	void Cancel()
	{
		_js.GoBack();
	}

	bool CanSend()
	{
		return Request.CategoryId is not null && Request.Number is not null;
	}

	async Task Save()
	{
		var command = _mapper.Map<EditInscriptionCommand>((Request, TournamentId));
		var res = await _sender.Send(command);

		if (res.IsError)
		{
			_toastService.ShowErrors(res.Errors);
		} else
		{
			_toastService.ShowSuccess("Inscripción editada");
			await _js.GoBack();
		}
	}
}