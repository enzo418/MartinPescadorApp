@layout TournamentLayout
@page "/tournament/{TournamentId}/inscriptions"

@using FisherTournament.Application.Tournaments.Commands.RemoveInscription;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentInscriptions;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject IDialogService _dialogService
@inject NavigationManager _nav
@inject ISender _sender

<FluentGrid>
    <FluentGridItem sm="12" md="6">
        <h1 class="page-title-no-pt">Inscripciones</h1>
    </FluentGridItem>

    <FluentGridItem sm="12" md="6" Class="flex justify-end">
        <FluentButton
            Appearance="Appearance.Accent" 
            IconStart="@(new Icons.Regular.Size16.Add())"
            OnClick="@(() => _nav.NavigateTo($"/tournament/{TournamentId}/add/inscription"))">Agregar Inscripción</FluentButton>
    </FluentGridItem>
</FluentGrid>

<div class="mb-4 flex w-full flex-row justify-center gap-10">
    <div>
        <FluentSelect Items="@_categories"
        @bind-Value="@_selectedCategoryId"
        @bind-Value:after="Search"
                      OptionText="@(i => i.Name)"
                      OptionValue="@(i => i.Id)">
            <LabelTemplate>
                Filtrar por categoría
            </LabelTemplate>
        </FluentSelect>
    </div>
</div>

<FluentDataGrid @ref="_searchFluentDataGrid"
                TGridItem="GetTournamentInscriptionsQueryResult" 
                Pagination="@_searchPagination" 
                ItemsProvider="_searchItemsProviderCall" 
                GridTemplateColumns="0.1fr 0.3fr 0.4fr 0.3fr 0.4fr">
    <ChildContent>
        <PropertyColumn Title="N°" Property="@(c => c.Number)" />

        <PropertyColumn Title="DNI" Property="@(c => c.FisherDNI)" />

        <PropertyColumn Title="Nombre" Property="@(c => c.FisherName)" />

        <PropertyColumn Title="Categoría" Property="@(c => c.CategoryName)" />

        <TemplateColumn Title="Acciones" Align="@Align.End">
            <FluentButton 
                          IconEnd="@(new Icons.Regular.Size24.Edit())"
                          OnClick="@(() => Edit(context))" />
            <FluentButton 
                          IconEnd="@(new Icons.Regular.Size24.Delete().WithColor("red"))"
                          OnClick="@(() => Delete(context))" />
        </TemplateColumn>
    </ChildContent>

    <EmptyContent>
        <div Style="min-height: 300px;" class="empty-content flex items-center">
            <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
            &nbsp; Todavía no hay inscripciones.
        </div>
    </EmptyContent>
</FluentDataGrid>

<FluentPaginator State="@_searchPagination" />

@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    GridItemsProvider<GetTournamentInscriptionsQueryResult> _searchItemsProviderCall = default!;
    PaginationState _searchPagination = new PaginationState { ItemsPerPage = 10 };
    FluentDataGrid<GetTournamentInscriptionsQueryResult> _searchFluentDataGrid = default!;

    List<GetTournamentCategoriesQueryResult> _categories = new();
    string _selectedCategoryId = "all";

    protected override async Task OnInitializedAsync()
    {
        var query = new GetTournamentCategoriesQuery(TournamentId);
        var categoriesRes = await _sender.Send(query);

        if (categoriesRes.IsError)
        {
            _toastService.ShowErrors(categoriesRes.Errors);
        }
        else
        {
            _categories = categoriesRes.Value.Where(c => c.Name != "General").ToList();
        }

        _categories.Add(new GetTournamentCategoriesQueryResult { Id = "all", Name = "Todas" });

        _searchItemsProviderCall = async req =>
        {
            var cat = _selectedCategoryId == "all" ? null : _selectedCategoryId;
            var query = new GetTournamentInscriptionsQuery(TournamentId, cat, _searchPagination.CurrentPageIndex + 1, _searchPagination.ItemsPerPage);
            var result = await _sender.Send(query);

            if (result.IsError)
            {
                _toastService.ShowErrors(result.Errors);
                return GridItemsProviderResult.From(
                    items: new List<GetTournamentInscriptionsQueryResult>(),
                    totalItemCount: 0
                );
            }

            return GridItemsProviderResult.From(
                items: result.Value.Items,
                totalItemCount: result.Value.TotalCount
            );
        };
    }

    void Edit(GetTournamentInscriptionsQueryResult inc)
    {
        _nav.NavigateTo($"/tournament/{TournamentId}/inscription/{inc.FisherId}");
    }

    async Task Delete(GetTournamentInscriptionsQueryResult inc)
    {
        var dialog = await _dialogService.ShowConfirmationAsync(
            $"Eliminar la inscripción de {inc.FisherName} en la categoría {inc.CategoryName}?",
            "Si", "No",
            "Confirmar"
        );
        var result = await dialog.Result;
        if (!result.Cancelled){
            var command = new RemoveInscriptionCommand(TournamentId, inc.FisherId);
            var res = await _sender.Send(command);

            if (res.IsError)
			{
				_toastService.ShowErrors(res.Errors);
				return;
			}

            _toastService.ShowSuccess($"Eliminada inscripción {inc.Number}");    
            
            await Search();
        }
    }

    async Task Search()
    {
        await _searchPagination.SetCurrentPageIndexAsync(0);
        await _searchFluentDataGrid.RefreshDataAsync();
    }

}